-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=6137,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=445,HLS_SYN_LUT=767,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_348_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_632 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_639 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_384_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_reg_644 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_fu_390_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_651 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_420_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_reg_656 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_cast_fu_442_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_cast_reg_666 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_456_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_reg_677 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_cast_fu_461_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_cast_reg_682 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_fu_484_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_698 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_490_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_reg_703 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_504_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_reg_714 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_517_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_reg_724 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_fu_530_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_reg_734 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_552_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_reg_235 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_246 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_26_cast_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_cast_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_314_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_324_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_336_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_332_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_344_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_354_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_360_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_372_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_368_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_380_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_396_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_408_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_404_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_416_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_432_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_446_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_cast6_fu_438_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_465_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_475_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_494_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_508_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_521_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_354_p00 : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_426_p2 = ap_const_lv1_1))) then 
                i_reg_235 <= i_1_reg_651;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_235 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    j_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_reg_246 <= j_1_reg_698;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_308_p2 = ap_const_lv1_0))) then 
                j_reg_246 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_258 <= A_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_258 <= A_q0;
            end if; 
        end if;
    end process;

    reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_263 <= kernel_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_263 <= kernel_q0;
            end if; 
        end if;
    end process;

    reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_268 <= A_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_268 <= A_q1;
            end if; 
        end if;
    end process;

    reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_273 <= kernel_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_273 <= kernel_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_308_p2 = ap_const_lv1_0))) then
                i_1_reg_651 <= i_1_fu_390_p2;
                    tmp_18_reg_644(10 downto 2) <= tmp_18_fu_384_p2(10 downto 2);
                    tmp_1_reg_639(9 downto 1) <= tmp_1_fu_354_p2(9 downto 1);
                    tmp_21_reg_656(10 downto 2) <= tmp_21_fu_420_p2(10 downto 2);
                    tmp_s_reg_632(10 downto 2) <= tmp_s_fu_348_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_1_reg_698 <= j_1_fu_484_p2;
                    tmp_cast_reg_703(4 downto 0) <= tmp_cast_fu_490_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_290 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_294 <= grp_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_304 <= grp_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp1_reg_754 <= tmp1_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_15_reg_759 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_17_reg_764 <= tmp_17_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_24_reg_714 <= tmp_24_fu_504_p2;
                tmp_28_reg_724 <= tmp_28_fu_517_p2;
                tmp_31_reg_734 <= tmp_31_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_426_p2 = ap_const_lv1_0))) then
                tmp_25_reg_677 <= tmp_25_fu_456_p2;
                    tmp_6_cast_reg_666(4 downto 0) <= tmp_6_cast_fu_442_p1(4 downto 0);
                    tmp_8_cast_reg_682(4 downto 0) <= tmp_8_cast_fu_461_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_s_reg_632(1 downto 0) <= "00";
    tmp_1_reg_639(0) <= '0';
    tmp_18_reg_644(1 downto 0) <= "00";
    tmp_21_reg_656(1 downto 0) <= "00";
    tmp_6_cast_reg_666(10 downto 5) <= "000000";
    tmp_8_cast_reg_682(10 downto 5) <= "000000";
    tmp_cast_reg_703(10 downto 5) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_308_p2, ap_CS_fsm_state3, exitcond_fu_426_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_308_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_426_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3, tmp_26_cast_fu_451_p1, tmp_33_cast_fu_499_p1, tmp_31_cast_fu_512_p1, tmp_28_cast_fu_534_p1, tmp_35_cast_fu_542_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address0 <= tmp_35_cast_fu_542_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address0 <= tmp_28_cast_fu_534_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address0 <= tmp_31_cast_fu_512_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= tmp_33_cast_fu_499_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= tmp_26_cast_fu_451_p1(10 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state3, tmp_30_cast_fu_470_p1, tmp_27_cast_fu_479_p1, tmp_34_cast_fu_525_p1, tmp_32_cast_fu_538_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address1 <= tmp_32_cast_fu_538_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address1 <= tmp_34_cast_fu_525_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address1 <= tmp_27_cast_fu_479_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address1 <= tmp_30_cast_fu_470_p1(10 - 1 downto 0);
        else 
            A_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_308_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_308_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_308_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_308_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_308_p2 <= "1" when (i_reg_235 = ap_const_lv5_1B) else "0";
    exitcond_fu_426_p2 <= "1" when (j_reg_246 = ap_const_lv5_1B) else "0";
    grp_fu_278_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_263) * signed(reg_258))), 32));
    grp_fu_284_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_273) * signed(reg_268))), 32));
    grp_fu_298_p2 <= std_logic_vector(unsigned(reg_294) + unsigned(reg_290));
    i_1_fu_390_p2 <= std_logic_vector(unsigned(i_reg_235) + unsigned(ap_const_lv5_1));
    j_1_fu_484_p2 <= std_logic_vector(unsigned(j_reg_246) + unsigned(ap_const_lv5_1));

    kernel_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            kernel_address1 <= "XXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_address0 <= tmp_29_cast_fu_580_p1(10 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= tmp_17_reg_764;

    out_r_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_408_p3),11));
    p_shl2_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_360_p3),11));
    p_shl3_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_372_p3),11));
    p_shl4_cast_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_324_p3),11));
    p_shl5_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_336_p3),11));
    p_shl_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_396_p3),11));
    tmp1_fu_552_p2 <= std_logic_vector(unsigned(reg_304) + unsigned(tmp3_fu_546_p2));
    tmp3_fu_546_p2 <= std_logic_vector(unsigned(reg_294) + unsigned(reg_290));
    tmp4_fu_569_p2 <= std_logic_vector(unsigned(reg_304) + unsigned(tmp6_fu_563_p2));
    tmp6_fu_563_p2 <= std_logic_vector(unsigned(reg_290) + unsigned(tmp7_fu_558_p2));
    tmp7_fu_558_p2 <= std_logic_vector(unsigned(reg_294) + unsigned(tmp_15_reg_759));
    tmp_17_fu_575_p2 <= std_logic_vector(unsigned(tmp1_reg_754) + unsigned(tmp4_fu_569_p2));
    tmp_18_fu_384_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_368_p1) - unsigned(p_shl3_cast_fu_380_p1));
    tmp_19_fu_396_p3 <= (i_1_fu_390_p2 & ap_const_lv5_0);
    tmp_1_fu_354_p0 <= tmp_1_fu_354_p00(5 - 1 downto 0);
    tmp_1_fu_354_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_314_p2),10));
    tmp_1_fu_354_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_354_p0) * unsigned(ap_const_lv10_1A), 10));
    tmp_20_fu_408_p3 <= (i_1_fu_390_p2 & ap_const_lv2_0);
    tmp_21_fu_420_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_404_p1) - unsigned(p_shl1_cast_fu_416_p1));
    tmp_22_fu_446_p2 <= std_logic_vector(unsigned(tmp_s_reg_632) + unsigned(tmp_6_cast_fu_442_p1));
    tmp_23_fu_475_p2 <= std_logic_vector(unsigned(tmp_18_reg_644) + unsigned(tmp_6_cast_reg_666));
    tmp_24_fu_504_p2 <= std_logic_vector(unsigned(tmp_21_reg_656) + unsigned(tmp_6_cast_reg_666));
    tmp_25_fu_456_p2 <= std_logic_vector(unsigned(tmp_1_reg_639) + unsigned(tmp_6_cast6_fu_438_p1));
        tmp_26_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_446_p2),64));

    tmp_26_fu_465_p2 <= std_logic_vector(unsigned(tmp_s_reg_632) + unsigned(tmp_8_cast_fu_461_p1));
        tmp_27_cast_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_475_p2),64));

    tmp_27_fu_508_p2 <= std_logic_vector(unsigned(tmp_18_reg_644) + unsigned(tmp_8_cast_reg_682));
        tmp_28_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_reg_714),64));

    tmp_28_fu_517_p2 <= std_logic_vector(unsigned(tmp_21_reg_656) + unsigned(tmp_8_cast_reg_682));
    tmp_29_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_677),64));
    tmp_29_fu_494_p2 <= std_logic_vector(unsigned(tmp_s_reg_632) + unsigned(tmp_cast_fu_490_p1));
    tmp_2_fu_324_p3 <= (tmp_fu_314_p2 & ap_const_lv5_0);
        tmp_30_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_fu_465_p2),64));

    tmp_30_fu_521_p2 <= std_logic_vector(unsigned(tmp_18_reg_644) + unsigned(tmp_cast_reg_703));
        tmp_31_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_fu_508_p2),64));

    tmp_31_fu_530_p2 <= std_logic_vector(unsigned(tmp_21_reg_656) + unsigned(tmp_cast_reg_703));
        tmp_32_cast_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_reg_724),64));

        tmp_33_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_fu_494_p2),64));

        tmp_34_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_fu_521_p2),64));

        tmp_35_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_reg_734),64));

    tmp_4_fu_336_p3 <= (tmp_fu_314_p2 & ap_const_lv2_0);
    tmp_5_fu_432_p2 <= std_logic_vector(unsigned(j_reg_246) + unsigned(ap_const_lv5_1F));
    tmp_6_cast6_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_432_p2),10));
    tmp_6_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_432_p2),11));
    tmp_6_fu_360_p3 <= (i_reg_235 & ap_const_lv5_0);
    tmp_8_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_246),11));
    tmp_8_fu_372_p3 <= (i_reg_235 & ap_const_lv2_0);
    tmp_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_fu_484_p2),11));
    tmp_fu_314_p2 <= std_logic_vector(unsigned(i_reg_235) + unsigned(ap_const_lv5_1F));
    tmp_s_fu_348_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_332_p1) - unsigned(p_shl5_cast_fu_344_p1));
end behav;
